"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""
import re
from datetime import datetime
from typing import Tuple, Any

class UncertaintyEngine:
    """–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR"""
    
    def __init__(self, organization: str):
        self.organization = organization
        self.thresholds = {
            "1T": {"min_reg_digits": 4, "min_name_length": 5, "min_number_length": 4},
            "ROSNOU": {"min_reg_digits": 3, "min_name_length": 8, "min_number_length": 6},
            "FINUNIVERSITY": {"min_reg_digits": 4, "min_name_length": 8, "min_number_length": 8}
        }
    
    def should_flag_uncertainty(self, field_name: str, original_text: str, 
                              parsed_result: Any, corrections_made: bool = False) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ñ–ª–∞–≥–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏"""
        config = self.thresholds.get(self.organization, {})
        
        if corrections_made:
            return True
            
        if field_name == "registration_number":
            digits_count = len(re.findall(r'\d', original_text))
            return digits_count < config.get("min_reg_digits", 3)
        elif field_name == "full_name":
            return len(str(parsed_result).strip()) < config.get("min_name_length", 5)
        elif field_name in ["series_and_number", "series", "number"]:
            if isinstance(parsed_result, tuple) and len(parsed_result) >= 2:
                number_length = len(str(parsed_result[1]))
                return number_length < config.get("min_number_length", 4)
            elif isinstance(parsed_result, str):
                return len(parsed_result) < config.get("min_number_length", 4)
        
        return False

class CommonParsers:
    """–û–±—â–∏–µ –ø–∞—Ä—Å–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    @staticmethod
    def parse_date_standard(text: str) -> Tuple[str, bool]:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD –º–µ—Å—è—Ü YYYY –≥.'"""
        match = re.search(r'(\d{1,2})\s+(\w+)\s+(\d{4})', text, re.IGNORECASE)
        if match:
            day, month_str, year = match.groups()
            months = {
                '—è–Ω–≤–∞—Ä—è': '01', '—Ñ–µ–≤—Ä–∞–ª—è': '02', '–º–∞—Ä—Ç–∞': '03', '–∞–ø—Ä–µ–ª—è': '04',
                '–º–∞—è': '05', '–∏—é–Ω—è': '06', '–∏—é–ª—è': '07', '–∞–≤–≥—É—Å—Ç–∞': '08', 
                '—Å–µ–Ω—Ç—è–±—Ä—è': '09', '–æ–∫—Ç—è–±—Ä—è': '10', '–Ω–æ—è–±—Ä—è': '11', '–¥–µ–∫–∞–±—Ä—è': '12'
            }
            month = months.get(month_str.lower())
            if month:
                try:
                    result = datetime(int(year), int(month), int(day)).date().isoformat()
                    return result, False
                except ValueError:
                    pass
        return text.strip(), True
    
    @staticmethod 
    def parse_fullname_simple(text: str) -> Tuple[str, bool]:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –§–ò–û - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ –µ—Å—Ç—å"""
        result = text.strip()
        return result, len(result) < 8

class OneTParsers:
    """–ü–∞—Ä—Å–µ—Ä—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ 1–¢"""
    
    @staticmethod
    def parse_series_and_number(text: str) -> Tuple[str, str, bool]:
        """–ü–∞—Ä—Å–µ—Ä —Å–µ—Ä–∏–∏ –∏ –Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ 1–¢ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '02 123456'"""
        text = re.sub(r'[^\d\s]', ' ', text.strip())
        
        patterns = [r'(\d{2})\s*(\d{6})', r'(\d{2})[\s-]*(\d{6})', r'(\d{2})(\d{6})']
        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                series, number = match.group(1), match.group(2)
                uncertain = len(number) < 4
                return series, number, uncertain
                
        return "", "", True
    
    @staticmethod
    def parse_reg_number(text: str) -> Tuple[str, bool]:
        """–ü–∞—Ä—Å–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ 1–¢"""
        digits = ''.join(re.findall(r'\d', text))
        
        if not digits:
            return "000000", True
        
        if len(digits) <= 6:
            result = digits.zfill(6)
        else:
            result = digits
        
        uncertain = len(digits) < 4
        return result, uncertain
    
    @staticmethod
    def parse_date_certificate(text: str) -> Tuple[str, bool]:
        """–ü–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã –¥–ª—è —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π 1–¢"""
        return CommonParsers.parse_date_standard(text)
    
    @staticmethod
    def parse_date_diploma(text: str) -> Tuple[str, bool]:
        """–ü–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã –¥–ª—è –¥–∏–ø–ª–æ–º–æ–≤ 1–¢ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '20.12.2024'"""
        match = re.search(r'(\d{1,2})\.(\d{1,2})\.(\d{4})', text)
        if match:
            day, month, year = match.groups()
            try:
                result = datetime(int(year), int(month), int(day)).date().isoformat()
                return result, False
            except ValueError:
                return text.strip(), True
        return text.strip(), True

class RosNouParsers:
    """–ü–∞—Ä—Å–µ—Ä—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –†–û–°–ù–û–£"""
    
    @staticmethod
    def parse_series_and_number(text: str) -> Tuple[str, str, bool]:
        """–ü–∞—Ä—Å–µ—Ä —Å–µ—Ä–∏–∏ –∏ –Ω–æ–º–µ—Ä–∞ –†–û–°–ù–û–£ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '12-–î 2024000010'"""
        digits = ''.join(re.findall(r'\d', text))
        corrections_made = False
        
        if len(digits) >= 10:
            series = digits[:2]
            number = digits[2:12] if len(digits) >= 12 else digits[2:10]
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OCR –æ—à–∏–±–∫–∏: '71', '11', '17' —á–∞—Å—Ç–æ –æ—à–∏–±–æ—á–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è –∫–∞–∫ '77'
            if series in ['71', '11', '17']:
                series = '77'
                corrections_made = True
                print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–µ—Ä–∏—è OCR: {digits[:2]} -> 77")
                
            uncertain = len(number) < 8 or corrections_made
            return series, number, uncertain
            
        return digits[:2].zfill(2) if len(digits) >= 2 else "00", \
               digits[2:] if len(digits) > 2 else "", True
    
    @staticmethod
    def parse_reg_number_diploma(text: str) -> Tuple[str, bool]:
        """–ü–∞—Ä—Å–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–∏–ø–ª–æ–º–æ–≤ –†–û–°–ù–û–£ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'NNNNN-–î'"""
        original_text = text.upper()
        corrections_made = False
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è OCR –æ—à–∏–±–æ–∫
        ocr_corrections = {
            '–ë–ê–°': '–î', '–í–ê–°': '–î', '8–ê–°': '–î', '–ê–°': '–î', '8': '–î', '4': '–î', '0': '–î'
        }
        text_upper = original_text
        
        for wrong, correct in ocr_corrections.items():
            if wrong in text_upper:
                text_upper = text_upper.replace(wrong, correct)
                corrections_made = True
                print(f"üîß OCR –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {wrong} -> {correct}")
        
        # –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–∞ NNNNN-–î
        match = re.search(r'(\d{5})-[–î–î]', text_upper, re.UNICODE)
        if match:
            result = f"{match.group(1)}-–î"
            return result, corrections_made
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ü–∏—Ñ—Ä—ã
        digits = re.findall(r'\d', text)
        if digits:
            number_part = ''.join(digits[:5])
            if len(number_part) < 5:
                number_part = number_part.zfill(5)
            result = f"{number_part}-–î"
            print(f"üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–º–µ—Ä: {result}")
            return result, True
            
        return "00000-–î", True
    
    @staticmethod
    def parse_reg_number_certificate(text: str) -> Tuple[str, bool]:
        """–ü–∞—Ä—Å–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π –†–û–°–ù–û–£ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ü–ö-243'"""
        match = re.search(r'([–ê-–Ø]{2,3})-(\d{2,3})', text.upper(), re.IGNORECASE)
        if match:
            letters = match.group(1)
            number = match.group(2)
            corrections_made = False
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–∫–≤
            letter_corrections = {"–ü–ê–î": "–ü–ö", "–ê": "–ö", "4": "–ö"}
            if letters in letter_corrections:
                letters = letter_corrections[letters]
                corrections_made = True
                print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {match.group(1)} -> {letters}")
                
            return f"{letters}-{number}", corrections_made
            
        return "–ü–ö-000", True
    
    @staticmethod
    def parse_fullname_diploma(text: str) -> Tuple[str, bool]:
        """–ü–∞—Ä—Å–µ—Ä –§–ò–û –¥–ª—è –¥–∏–ø–ª–æ–º–æ–≤ –†–û–°–ù–û–£ (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π)"""
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        
        if len(lines) >= 2:
            result = f"{lines[0]} {lines[1]}"
            uncertain = any(len(line) < 2 for line in lines[:2])
            return result, uncertain
        elif len(lines) == 1:
            result = lines[0].strip()
            uncertain = len(result) < 8
            return result, uncertain
            
        return text.strip(), True
    
    @staticmethod 
    def parse_fullname_certificate(text: str) -> Tuple[str, bool]:
        """–ü–∞—Ä—Å–µ—Ä –§–ò–û –¥–ª—è —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π –†–û–°–ù–û–£"""
        result = text.strip()
        return result, len(result) < 8

class FinUnivParsers:
    """–ü–∞—Ä—Å–µ—Ä—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞"""
    
    @staticmethod
    def parse_series_and_number_v1(text: str) -> Tuple[str, str, bool]:
        """–ü–∞—Ä—Å–µ—Ä —Å–µ—Ä–∏–∏ –∏ –Ω–æ–º–µ—Ä–∞ –§–∏–Ω–£–Ω–∏–≤ –≤–∞—Ä–∏–∞–Ω—Ç 1: '–ü–ö 771804095780' –∏–ª–∏ '7733 01156696'"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: –±—É–∫–≤—ã + –ø—Ä–æ–±–µ–ª + —Ü–∏—Ñ—Ä—ã
        match = re.search(r'([–ê-–ØA-Z]{2,4})\s+(\d{8,})', text.upper())
        if match:
            series = match.group(1)
            number = match.group(2)
            uncertain = len(number) < 8
            print(f"üîß FinUniv v1 –ø–∞—Ä—Å–∏–Ω–≥: '{text}' -> —Å–µ—Ä–∏—è: '{series}', –Ω–æ–º–µ—Ä: '{number}'")
            return series, number, uncertain
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: —Ü–∏—Ñ—Ä—ã + –ø—Ä–æ–±–µ–ª + —Ü–∏—Ñ—Ä—ã
        match = re.search(r'(\d{2,4})\s+(\d{8,})', text.upper())
        if match:
            series = match.group(1)
            number = match.group(2)
            uncertain = len(number) < 8
            print(f"üîß FinUniv v1 —Ü–∏—Ñ—Ä—ã: '{text}' -> —Å–µ—Ä–∏—è: '{series}', –Ω–æ–º–µ—Ä: '{number}'")
            return series, number, uncertain
            
        # –ï—â–µ –æ–¥–∏–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: –±—É–∫–≤—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ + —Ü–∏—Ñ—Ä—ã
        match = re.search(r'([–ê-–ØA-Z]{2,4})(\d{8,})', text.upper())
        if match:
            series = match.group(1)
            number = match.group(2)
            uncertain = len(number) < 8
            print(f"üîß FinUniv v1 –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞: '{text}' -> —Å–µ—Ä–∏—è: '{series}', –Ω–æ–º–µ—Ä: '{number}'")
            return series, number, uncertain
            
        print(f"‚ö†Ô∏è FinUniv v1 –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å: '{text}'")
        return "", "", True
    
    @staticmethod
    def parse_series_and_number_v2(text: str) -> Tuple[str, str, bool]:
        """–ü–∞—Ä—Å–µ—Ä —Å–µ—Ä–∏–∏ –∏ –Ω–æ–º–µ—Ä–∞ –§–∏–Ω–£–Ω–∏–≤ –≤–∞—Ä–∏–∞–Ω—Ç 2"""
        return FinUnivParsers.parse_series_and_number_v1(text)
    
    @staticmethod
    def parse_reg_number_v1(text: str) -> Tuple[str, bool]:
        """–ü–∞—Ä—Å–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –§–∏–Ω–£–Ω–∏–≤ v1: '06.11373'"""
        match = re.search(r'(\d+\.?\d*)', text, re.IGNORECASE)
        if match:
            result = match.group(1)
            return result, len(result) < 5
        return text.strip(), True
    
    @staticmethod
    def parse_reg_number_v2(text: str) -> Tuple[str, bool]:
        """–ü–∞—Ä—Å–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –§–∏–Ω–£–Ω–∏–≤ v2"""
        return FinUnivParsers.parse_reg_number_v1(text)
    
    @staticmethod
    def parse_fullname_simple(text: str) -> Tuple[str, bool]:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –§–ò–û –¥–ª—è –§–∏–Ω–£–Ω–∏–≤ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)"""
        result = text.strip()
        return result, len(result) < 8
    
    @staticmethod
    def parse_fullname_complex(text: str) -> Tuple[str, bool]:
        """–°–ª–æ–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –§–ò–û –¥–ª—è –§–∏–Ω–£–Ω–∏–≤ v2 (–§–ò–û –Ω–∞ —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫–∞—Ö –≤ –¥–∞—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ)"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        cleaned_text = re.sub(r'[^\w\s\-–ê-–Ø–∞-—è–Å—ë]', ' ', text)
        cleaned_text = re.sub(r'\s+', ' ', cleaned_text.strip())
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –§–ò–û –ø–æ —Å—Ç—Ä–æ–∫–∞–º/—Å–ª–æ–≤–∞–º
        patterns = [
            r'(\w+\-?\w*)\s+(\w+\-?\w*)\s+(\w+\-?\w*)',  # –¢—Ä–∏ —Å–ª–æ–≤–∞ –ø–æ–¥—Ä—è–¥
            r'(\w+)\s+(\w+)\s+(\w+)',  # –¢—Ä–∏ —Å–ª–æ–≤–∞
            r'(\w+)\s+(\w+)'  # –î–≤–∞ —Å–ª–æ–≤–∞
        ]
        
        for pattern in patterns:
            match = re.search(pattern, cleaned_text, re.IGNORECASE)
            if match:
                groups = match.groups()
                surname, name = groups[0], groups[1]
                patronymic = groups[2] if len(groups) > 2 else ""
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –¥–µ—Ñ–∏—Å–æ–≤ –≤ –∫–æ–Ω—Ü–µ
                surname = surname.rstrip('-')
                name = name.rstrip('-')
                patronymic = patronymic.rstrip('-')
                    
                if patronymic:
                    result = f"{surname} {name} {patronymic}"
                else:
                    result = f"{surname} {name}"
                    
                print(f"üîß –†–∞–∑–æ–±—Ä–∞–Ω–æ –§–ò–û: {result}")
                return result, True
        
        result = cleaned_text.strip()
        print(f"‚ö†Ô∏è –§–ò–û —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {result}")
        return result, True
    
    @staticmethod
    def parse_date_from_text(text: str) -> Tuple[str, bool]:
        """–ü–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –§–∏–Ω–£–Ω–∏–≤ —Å OCR-–∫–æ—Ä—Ä–µ–∫—Ü–∏—è–º–∏"""
        date_patterns = [
            r'(\d{1,2})\s+(\w+)\s+(\d{4})',  # '30 –º–∞—è 2024'
            r'¬´?(\d{1,2})\s*¬ª?\s+(\w+)\s+(\d{4})',  # '¬´30¬ª –º–∞—è 2024'
        ]
        
        months = {
            '—è–Ω–≤–∞—Ä—è': '01', '—Ñ–µ–≤—Ä–∞–ª—è': '02', '–º–∞—Ä—Ç–∞': '03', '–∞–ø—Ä–µ–ª—è': '04',
            '–º–∞—è': '05', '–∏—é–Ω—è': '06', '–∏—é–ª—è': '07', '–∞–≤–≥—É—Å—Ç–∞': '08',
            '—Å–µ–Ω—Ç—è–±—Ä—è': '09', '–æ–∫—Ç—è–±—Ä—è': '10', '–Ω–æ—è–±—Ä—è': '11', '–¥–µ–∫–∞–±—Ä—è': '12'
        }
        
        for pattern in date_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                day, month_str, year = match.groups()
                month = months.get(month_str.lower())
                
                if month:
                    try:
                        result = datetime(int(year), int(month), int(day)).date().isoformat()
                        print(f"üîß –î–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {text.strip()} -> {result}")
                        return result, False
                    except ValueError:
                        continue
                        
        return text.strip(), True