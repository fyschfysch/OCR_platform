"""
OCR –¥–≤–∏–∂–æ–∫ –Ω–∞ –±–∞–∑–µ Tesseract
"""
import pytesseract
from PIL import Image, ImageEnhance, ImageFilter
from typing import Dict, Any, List, Optional, Tuple
import re

from .config import DocumentConfig
from .parsers import OneTParsers, RosNouParsers, FinUnivParsers, CommonParsers, UncertaintyEngine

class OCREngine:
    """OCR –¥–≤–∏–∂–æ–∫ –Ω–∞ –±–∞–∑–µ Tesseract"""
    
    def __init__(self, tesseract_path: str = None):
        if tesseract_path:
            try:
                pytesseract.pytesseract.tesseract_cmd = tesseract_path
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –æ–±–ª–∞–∫–µ
        self.verify_tesseract()
    
    def verify_tesseract(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Tesseract"""
        try:
            version = pytesseract.get_tesseract_version()
            print(f"‚úÖ Tesseract OCR –≥–æ—Ç–æ–≤, –≤–µ—Ä—Å–∏—è: {version}")
        except Exception as e:
            print(f"‚ö†Ô∏è Tesseract –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def preprocess_region(self, region: Image.Image, ocr_params: Dict, field_name: str) -> Image.Image:
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
        scale_factor = ocr_params.get('scale_factor', 3)
        contrast_boost = ocr_params.get('contrast_boost', 1.5)
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        if scale_factor > 1:
            width, height = region.size
            new_width = int(width * scale_factor)
            new_height = int(height * scale_factor)
            region = region.resize((new_width, new_height), Image.LANCZOS)
        
        # –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        if contrast_boost > 1:
            enhancer = ImageEnhance.Contrast(region)
            region = enhancer.enhance(contrast_boost)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∑–∫–æ—Å—Ç—å –¥–ª—è –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        if field_name in ['series_and_number', 'full_name']:
            enhancer = ImageEnhance.Sharpness(region)
            region = enhancer.enhance(1.3)
        
        return region
    
    def remove_lines_from_region(self, img: Image.Image, aggressive: bool = False) -> Image.Image:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–Ω–∏–π –±–µ–∑ OpenCV"""
        if aggressive:
            # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–π OpenCV –æ–±—Ä–∞–±–æ—Ç–∫–∏
            img = img.filter(ImageFilter.GaussianBlur(radius=0.5))
        return img
    
    def extract_text_from_region(self, image: Image.Image, box: List[int],
                                ocr_params: Dict[str, Any] = None, field_name: str = "") -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if not box or len(box) != 4:
                return ""
            
            x1, y1, x2, y2 = box
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            img_width, img_height = image.size
            x1 = max(0, min(x1, img_width))
            y1 = max(0, min(y1, img_height))
            x2 = max(x1 + 1, min(x2, img_width))
            y2 = max(y1 + 1, min(y2, img_height))
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
            region = image.crop((x1, y1, x2, y2))
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
            if ocr_params:
                region = self.preprocess_region(region, ocr_params, field_name)
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Å –ª–∏–Ω–∏—è–º–∏
            if field_name == 'registration_number':
                region = self.remove_lines_from_region(region, aggressive=True)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
            region = region.convert('L')
            
            # –ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —à—É–º–∞
            region = region.filter(ImageFilter.MedianFilter(size=3))
            
            # PSM –∏ —è–∑—ã–∫
            psm = self.get_psm_for_field(field_name, ocr_params)
            lang = self.get_language_for_field(field_name)
            
            # OCR
            config_str = f'--oem 3 --psm {psm}'
            text = pytesseract.image_to_string(region, lang=lang, config=config_str)
            return text.strip()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ OCR –¥–ª—è –ø–æ–ª—è {field_name}: {e}")
            return ""
    
    def get_psm_for_field(self, field_name: str, ocr_params: Dict = None) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ PSM –¥–ª—è –ø–æ–ª—è"""
        if ocr_params and 'psm_configs' in ocr_params:
            return ocr_params['psm_configs'].get(field_name, 7)
        
        if field_name == 'full_name':
            return 7  # –ï–¥–∏–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞
        elif field_name == 'issue_date':
            return 6  # –ï–¥–∏–Ω—ã–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞
        elif field_name == 'series_and_number':
            return 7  # –ï–¥–∏–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞
        elif field_name == 'registration_number':
            return 8  # –ï–¥–∏–Ω–æ–µ —Å–ª–æ–≤–æ
        else:
            return 7
    
    def get_language_for_field(self, field_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—è"""
        if field_name == 'full_name':
            return 'rus'
        elif field_name == 'series_and_number':
            return 'rus+eng'  # –î–ª—è –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–µ—Ä–∏–π
        elif field_name == 'registration_number':
            return 'rus+eng'
        elif field_name == 'issue_date':
            return 'rus'
        else:
            return 'rus+eng'
    
    def process_document_with_parser(self, image: Image.Image, config: DocumentConfig) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–∞—Ä—Å–µ—Ä–∞–º–∏"""
        results = {}
        uncertainty_engine = UncertaintyEngine(config.organization)
        
        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {config.name}")
        print(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.config_id}")
        print(f"üéØ –ü–∞—Ä—Å–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã: {bool(config.patterns)}")
        
        for field_name, box in config.fields.items():
            print(f"\nüìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ: {field_name}")
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            raw_text = self.extract_text_from_region(image, box, config.ocr_params, field_name)
            print(f"üî§ OCR —Ç–µ–∫—Å—Ç: '{raw_text}'")
            
            if not raw_text.strip():
                # –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                if field_name == 'series_and_number':
                    results['series'] = ""
                    results['number'] = ""
                    results['uncertain_series'] = True
                    results['uncertain_number'] = True
                else:
                    results[field_name] = ""
                    results[f'uncertain_{field_name}'] = True
                continue
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
            if field_name == 'series_and_number':
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è series_and_number
                if config.patterns and 'series_and_number' in config.patterns:
                    parser = config.patterns['series_and_number']
                    print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—Å–µ—Ä: {parser.__name__}")
                    try:
                        parsed_result = parser(raw_text)
                        if len(parsed_result) == 3:
                            series, number, uncertain = parsed_result
                            results['series'] = series
                            results['number'] = number
                            
                            print(f"‚úÖ –ü–∞—Ä—Å–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Å–µ—Ä–∏—è='{series}', –Ω–æ–º–µ—Ä='{number}', uncertain={uncertain}")
                            
                            if uncertain:
                                results['uncertain_series'] = True
                                results['uncertain_number'] = True
                        else:
                            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞
                            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä—Å–µ—Ä–∞: {parsed_result}")
                            results['series'] = ""
                            results['number'] = raw_text
                            results['uncertain_series'] = True
                            results['uncertain_number'] = True
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
                        results['series'] = ""
                        results['number'] = raw_text
                        results['uncertain_series'] = True
                        results['uncertain_number'] = True
                else:
                    # –ù–µ—Ç –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è series_and_number
                    print("‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –¥–ª—è series_and_number –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    results['series'] = ""
                    results['number'] = raw_text
                    results['uncertain_series'] = True
                    results['uncertain_number'] = True
            else:
                # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—è
                if config.patterns and field_name in config.patterns:
                    parser = config.patterns[field_name]
                    print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—Å–µ—Ä: {parser.__name__}")
                    try:
                        parsed_result = parser(raw_text)
                        if isinstance(parsed_result, tuple) and len(parsed_result) == 2:
                            value, uncertain = parsed_result
                            results[field_name] = value
                            print(f"‚úÖ –ü–∞—Ä—Å–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{value}', uncertain={uncertain}")
                            if uncertain:
                                results[f'uncertain_{field_name}'] = True
                        else:
                            # –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ tuple
                            results[field_name] = str(parsed_result)
                            results[f'uncertain_{field_name}'] = True
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {field_name}: {e}")
                        results[field_name] = raw_text
                        results[f'uncertain_{field_name}'] = True
                else:
                    # –ù–µ—Ç –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –ø–æ–ª—è
                    print(f"‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –¥–ª—è {field_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    results[field_name] = raw_text
                    results[f'uncertain_{field_name}'] = True
        
        print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results)} –ø–æ–ª–µ–π")
        return results

class DocumentProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, tesseract_path: str = None):
        self.ocr_engine = OCREngine(tesseract_path)
    
    def process_single_image(self, image: Image.Image, config: DocumentConfig, 
                           rotation_angle: int = 0) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if rotation_angle != 0:
                image = image.rotate(-rotation_angle, expand=True, fillcolor='white')
            
            results = self.ocr_engine.process_document_with_parser(image, config)
            return results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return {
                'full_name': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                'series': '00',
                'number': '000000',
                'registration_number': '000000',
                'issue_date': '2024-01-01'
            }
    
    def extract_fields(self, img: Image.Image, config: DocumentConfig, 
                      uncertainty_engine) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        return self.process_single_image(img, config)
