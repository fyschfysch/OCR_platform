"""
OCR –¥–≤–∏–∂–æ–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –¥–ª—è series_and_number –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏
"""
import pytesseract
from PIL import Image, ImageEnhance, ImageFilter
from typing import Dict, Any, List, Optional, Tuple
import cv2
import numpy as np
import re

from .config import DocumentConfig
from .parsers import OneTParsers, RosNouParsers, FinUnivParsers, CommonParsers, UncertaintyEngine

class OCREngine:
    """OCR –¥–≤–∏–∂–æ–∫ –Ω–∞ –±–∞–∑–µ Tesseract —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–∞—Ä—Å–µ—Ä–æ–≤"""
    
    def __init__(self, tesseract_path: str = None):
        if tesseract_path:
            pytesseract.pytesseract.tesseract_cmd = tesseract_path
        self.verify_tesseract()
    
    def verify_tesseract(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Tesseract"""
        try:
            version = pytesseract.get_tesseract_version()
            print(f"‚úÖ Tesseract OCR –≥–æ—Ç–æ–≤, –≤–µ—Ä—Å–∏—è: {version}")
        except Exception as e:
            print(f"‚ùå Tesseract –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            raise RuntimeError("Tesseract OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def preprocess_region(self, region: Image.Image, ocr_params: Dict, field_name: str) -> Image.Image:
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞ –ø–µ—Ä–µ–¥ OCR"""
        scale_factor = ocr_params.get('scale_factor', 3)
        contrast_boost = ocr_params.get('contrast_boost', 1.5)
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è OCR
        if scale_factor > 1:
            width, height = region.size
            new_width = int(width * scale_factor)
            new_height = int(height * scale_factor)
            region = region.resize((new_width, new_height), Image.LANCZOS)
        
        # –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        if contrast_boost > 1:
            enhancer = ImageEnhance.Contrast(region)
            region = enhancer.enhance(contrast_boost)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è FinUniv –§–ò–û
        if field_name == 'full_name' and 'FINUNIV' in str(ocr_params):
            enhancer = ImageEnhance.Sharpness(region)
            region = enhancer.enhance(1.5)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∑–∫–æ—Å—Ç—å –¥–ª—è —Å–µ—Ä–∏–∏ –∏ –Ω–æ–º–µ—Ä–∞
        if field_name == 'series_and_number':
            enhancer = ImageEnhance.Sharpness(region)
            region = enhancer.enhance(1.3)
        
        return region
    
    def remove_lines_from_region(self, img: Image.Image, aggressive: bool = False) -> Image.Image:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è OCR"""
        img_cv = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
        gray = cv2.cvtColor(img_cv, cv2.COLOR_BGR2GRAY)
        
        if aggressive:
            # –°–æ–∑–¥–∞–Ω–∏–µ —è–¥—Ä–∞ –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (40, 1))
            # –í—ã–¥–µ–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π
            lines_mask = cv2.morphologyEx(gray, cv2.MORPH_OPEN, horizontal_kernel)
            # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π
            gray_no_lines = cv2.subtract(gray, lines_mask)
            # –£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            gray_no_lines = cv2.addWeighted(gray_no_lines, 1.5, gray_no_lines, 0, 0)
        else:
            # –ú—è–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
            gray_no_lines = cv2.bilateralFilter(gray, 9, 75, 75)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ PIL
        img_processed = Image.fromarray(gray_no_lines)
        return img_processed
    
    def extract_text_from_region(self, image: Image.Image, box: List[int],
                                ocr_params: Dict[str, Any] = None, field_name: str = "") -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        try:
            if not box or len(box) != 4:
                return ""
            
            x1, y1, x2, y2 = box
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            img_width, img_height = image.size
            x1 = max(0, min(x1, img_width))
            y1 = max(0, min(y1, img_height))
            x2 = max(x1 + 1, min(x2, img_width))
            y2 = max(y1 + 1, min(y2, img_height))
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
            region = image.crop((x1, y1, x2, y2))
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
            if ocr_params:
                region = self.preprocess_region(region, ocr_params, field_name)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª–µ–π
            if field_name in ['registration_number']:
                region = self.remove_lines_from_region(region, aggressive=True)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
            region = region.convert('L')
            
            # –ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
            region = region.filter(ImageFilter.MedianFilter(size=3))
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ PSM –∏ —è–∑—ã–∫–∞
            psm = self.get_psm_for_field(field_name, ocr_params)
            lang = self.get_language_for_field(field_name)
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tesseract
            config_str = f'--oem 3 --psm {psm}'
            
            # OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            text = pytesseract.image_to_string(region, lang=lang, config=config_str)
            return text.strip()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ OCR –¥–ª—è –ø–æ–ª—è {field_name}: {e}")
            return ""
    
    def get_psm_for_field(self, field_name: str, ocr_params: Dict = None) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ PSM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—è"""
        if ocr_params and 'psm_configs' in ocr_params:
            return ocr_params['psm_configs'].get(field_name, 7)
        
        # –ë–∞–∑–æ–≤—ã–µ PSM –ø–æ —Ç–∏–ø—É –ø–æ–ª—è
        if field_name == 'full_name':
            return 7  # Single text line
        elif field_name == 'issue_date':
            return 6  # Uniform block of text
        elif field_name == 'series_and_number':
            return 7  # Single text line
        elif field_name == 'registration_number':
            return 8  # Single word
        else:
            return 7  # Default
    
    def get_language_for_field(self, field_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—è"""
        if field_name == 'full_name':
            return 'rus'
        elif field_name == 'series_and_number':
            return 'rus+eng'
        elif field_name == 'registration_number':
            return 'rus+eng'
        elif field_name == 'issue_date':
            return 'rus'
        else:
            return 'rus+eng'
    
    def process_document_with_parser(self, image: Image.Image, config: DocumentConfig) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø–∞—Ä—Å–µ—Ä–æ–≤ - –û–ë–ù–û–í–õ–ï–ù–û –¥–ª—è series_and_number"""
        results = {}
        uncertainty_engine = UncertaintyEngine(config.organization)
        
        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {config.name}")
        
        for field_name, box in config.fields.items():
            print(f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ: {field_name}, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {box}")
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            raw_text = self.extract_text_from_region(image, box, config.ocr_params, field_name)
            print(f"üî§ –°—ã—Ä–æ–π OCR —Ç–µ–∫—Å—Ç: '{raw_text}'")
            
            if not raw_text.strip():
                print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—è {field_name}")
                if field_name == 'series_and_number':
                    results['series'] = ""
                    results['number'] = ""
                    results['uncertain_series'] = True
                    results['uncertain_number'] = True
                else:
                    results[field_name] = ""
                    results[f'uncertain_{field_name}'] = True
                continue
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
            if field_name == 'series_and_number':
                # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –æ–±—Ä–∞–±–æ—Ç–∫–∞ series_and_number –∫–∞–∫ –µ–¥–∏–Ω–æ–≥–æ –ø–æ–ª—è
                if config.patterns and 'series_and_number' in config.patterns:
                    parser = config.patterns['series_and_number']
                    try:
                        parsed_result = parser(raw_text)
                        if len(parsed_result) == 3:  # (series, number, uncertain)
                            series, number, uncertain = parsed_result
                            results['series'] = series
                            results['number'] = number
                            print(f"‚úÖ –°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä: '{series}', '{number}', uncertain: {uncertain}")
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏
                            if uncertain or uncertainty_engine.should_flag_uncertainty('series_and_number', raw_text, (series, number)):
                                results['uncertain_series'] = True
                                results['uncertain_number'] = True
                        else:
                            # Fallback –µ—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ —Ç–æ —á—Ç–æ –æ–∂–∏–¥–∞–ª–æ—Å—å
                            results['series'] = ""
                            results['number'] = raw_text
                            results['uncertain_series'] = True
                            results['uncertain_number'] = True
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è series_and_number: {e}")
                        # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
                        series, number = self._parse_series_number_fallback(raw_text)
                        results['series'] = series
                        results['number'] = number
                        results['uncertain_series'] = True
                        results['uncertain_number'] = True
                else:
                    # Fallback –±–µ–∑ –ø–∞—Ä—Å–µ—Ä–∞
                    series, number = self._parse_series_number_fallback(raw_text)
                    results['series'] = series
                    results['number'] = number
                    results['uncertain_series'] = True
                    results['uncertain_number'] = True
                        
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                if config.patterns and field_name in config.patterns:
                    parser = config.patterns[field_name]
                    try:
                        parsed_result = parser(raw_text)
                        if isinstance(parsed_result, tuple) and len(parsed_result) == 2:
                            value, uncertain = parsed_result
                            results[field_name] = value
                            print(f"‚úÖ {field_name}: '{value}', uncertain: {uncertain}")
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏
                            if uncertain or uncertainty_engine.should_flag_uncertainty(field_name, raw_text, value, uncertain):
                                results[f'uncertain_{field_name}'] = True
                        else:
                            results[field_name] = str(parsed_result)
                            results[f'uncertain_{field_name}'] = True
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {field_name}: {e}")
                        results[field_name] = raw_text
                        results[f'uncertain_{field_name}'] = True
                else:
                    results[field_name] = raw_text
                    results[f'uncertain_{field_name}'] = True
        
        return results
    
    def _parse_series_number_fallback(self, text: str) -> Tuple[str, str]:
        """Fallback –ø–∞—Ä—Å–µ—Ä –¥–ª—è series_and_number —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        patterns = [
            r'(\d{2})\s*(\d{6})',  # 1T: "02 123456"
            r'(\d{2})-?\w?\s*(\d{8,10})',  # ROSNOU: "12-–î 2024000010"
            r'(\d{2,4})\s+(\d{8,})',  # FinUniv: "7733 01156696"
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                return match.group(1), match.group(2)
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –ø—Ä–æ–±–µ–ª–∞–º/–¥–µ—Ñ–∏—Å–∞–º
        parts = re.split(r'[\s\-]+', text.strip())
        if len(parts) >= 2:
            return parts[0], parts[1]
        
        return "", text.strip()

class DocumentProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π OCR –¥–≤–∏–∂–∫–∞"""
    
    def __init__(self, tesseract_path: str = None):
        self.ocr_engine = OCREngine(tesseract_path)
    
    def process_single_image(self, image: Image.Image, config: DocumentConfig, 
                           rotation_angle: int = 0) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if rotation_angle != 0:
                image = image.rotate(-rotation_angle, expand=True, fillcolor='white')
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–∞—Ä—Å–µ—Ä–∞–º–∏
            results = self.ocr_engine.process_document_with_parser(image, config)
            
            return results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {}
    
    def extract_fields(self, img: Image.Image, config: DocumentConfig, 
                      uncertainty_engine) -> Dict[str, Any]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—Ç–∞—Ä—ã–º API"""
        return self.process_single_image(img, config)
