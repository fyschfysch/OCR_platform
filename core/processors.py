"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–° –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ –∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
"""
import fitz  # PyMuPDF
from PIL import Image, ImageEnhance
import io
from typing import List, Tuple, Dict, Optional, Any
import json
from datetime import datetime

class SimpleImageProcessor:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è Streamlit —Å —Å—Ç—Ä–æ–≥–∏–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    
    def __init__(self, max_dimension: Optional[int] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        Args:
            max_dimension: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä. –ï—Å–ª–∏ None, —Ç–æ 1200px –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        self.max_dimension = max_dimension if max_dimension and max_dimension <= 3000 else 1200
    
    def convert_pdf_to_images(self, pdf_bytes: bytes) -> List[Image.Image]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ —Å–ø–∏—Å–æ–∫ PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        try:
            pdf_document = fitz.open(stream=pdf_bytes, filetype="pdf")
            images = []
            
            for page_num in range(pdf_document.page_count):
                page = pdf_document[page_num]
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ OCR
                mat = fitz.Matrix(2.0, 2.0)  # 2x –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                pix = page.get_pixmap(matrix=mat)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PIL Image
                img_data = pix.pil_tobytes(format="PNG")
                img = Image.open(io.BytesIO(img_data))
                
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if self.max_dimension and max(img.size) > self.max_dimension:
                    img = self._resize_if_needed(img)
                
                images.append(img)
            
            pdf_document.close()
            return images
            
        except ImportError as e:
            raise ImportError("PyMuPDF –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install PyMuPDF") from e
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}") from e
    
    def _resize_if_needed(self, img: Image.Image) -> Image.Image:
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ MAX_DIMENSION –µ—Å–ª–∏ –±–æ–ª—å—à–µ"""
        width, height = img.size
        max_current = max(width, height)
        
        if max_current > self.max_dimension:
            scale_factor = self.max_dimension / max_current
            new_width = int(width * scale_factor)
            new_height = int(height * scale_factor)
            print(f"üîß –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ: {width}x{height} -> {new_width}x{new_height}")
            return img.resize((new_width, new_height), Image.LANCZOS)
        
        print(f"‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {width}x{height}")
        return img
    
    def enhance_image(self, img: Image.Image) -> Image.Image:
        """–£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR"""
        # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å max_dimension –ø–æ –ª—é–±–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
        if max(img.size) > self.max_dimension:
            img = self._resize_if_needed(img)
        
        # –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        enhancer = ImageEnhance.Contrast(img)
        img = enhancer.enhance(1.2)
        
        # –£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
        enhancer = ImageEnhance.Sharpness(img)
        img = enhancer.enhance(1.1)
        
        return img
    
    def rotate_image(self, img: Image.Image, angle: int) -> Image.Image:
        """–ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if angle % 360 == 0:
            return img
        
        # –ü–æ–≤–æ—Ä–æ—Ç —Å –±–µ–ª–æ–π –∑–∞–ª–∏–≤–∫–æ–π
        return img.rotate(-angle, expand=True, fillcolor='white')
    
    def get_image_info(self, img: Image.Image) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        return {
            'size': img.size,
            'width': img.width,
            'height': img.height,
            'mode': img.mode,
            'format': img.format,
            'max_dimension': max(img.size),
            'is_properly_scaled': max(img.size) <= self.max_dimension
        }

class CoordinateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    
    def __init__(self):
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π
        self.default_coords = {
            'full_name': [220, 446, 833, 496],
            'series_and_number': [220, 800, 420, 830],
            'registration_number': [700, 800, 900, 830],
            'issue_date': [600, 880, 800, 910]
        }
    
    def validate_coordinates(self, coords: Tuple[int, int, int, int], 
                           image_size: Tuple[int, int]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if len(coords) != 4:
            return False
        
        x1, y1, x2, y2 = coords
        width, height = image_size
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if x1 >= x2 or y1 >= y2:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if x1 < 0 or y1 < 0 or x2 > width or y2 > height:
            return False
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
        if (x2 - x1) < 10 or (y2 - y1) < 10:
            return False
        
        return True
    
    def normalize_coordinates(self, coords: Tuple[int, int, int, int], 
                            image_size: Tuple[int, int]) -> Tuple[int, int, int, int]:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        x1, y1, x2, y2 = coords
        width, height = image_size
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        x1 = max(0, min(x1, width - 1))
        y1 = max(0, min(y1, height - 1))
        x2 = max(x1 + 1, min(x2, width))
        y2 = max(y1 + 1, min(y2, height))
        
        return (x1, y1, x2, y2)

class ResultsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self):
        # Fallback –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª–µ–π
        self.field_descriptions = {
            'full_name': '–§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞',
            'series': '–°–µ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞',
            'number': '–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞',
            'registration_number': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä',
            'issue_date': '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞'
        }
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π –ø–æ–ª–µ–π
        self.get_description = self._get_field_description
    
    def _get_field_description(self, field_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—è"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ config
            from .config import get_field_description
            return get_field_description(field_name)
        except ImportError:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –æ–ø–∏—Å–∞–Ω–∏–π
            return self.field_descriptions.get(field_name, field_name)
    
    def format_results_for_display(self, results: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        formatted = []
        uncertainties = results.get('uncertainties', [])
        
        for field_name, value in results.items():
            if field_name.startswith('uncertain_'):
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
            
            uncertain = any(u == field_name for u in uncertainties)
            
            formatted.append({
                'field_name': field_name,
                'description': self.get_description(field_name),
                'value': str(value),
                'uncertain': uncertain,
                'confidence': 'low' if uncertain else 'high'
            })
        
        return formatted
    
    def export_results_json(self, results: Dict[str, Any], filename: Optional[str] = None) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç"""
        export_data = {
            'export_info': {
                'timestamp': datetime.now().isoformat(),
                'version': '1.0',
                'filename': filename
            },
            'results': results
        }
        
        return json.dumps(export_data, ensure_ascii=False, indent=2)
    
    def get_statistics(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º OCR"""
        total_fields = len([k for k in results.keys() if not k.startswith('uncertain_')])
        empty_fields = len([k for k, v in results.items() 
                          if not k.startswith('uncertain_') and not str(v).strip()])
        uncertainties = len(results.get('uncertainties', []))
        
        return {
            'total_fields': total_fields,
            'successful_fields': total_fields - empty_fields,
            'empty_fields': empty_fields, 
            'uncertain_fields': uncertainties,
            'success_rate': ((total_fields - empty_fields) / total_fields * 100) if total_fields > 0 else 0,
            'confidence_rate': ((total_fields - uncertainties) / total_fields * 100) if total_fields > 0 else 0
        }
