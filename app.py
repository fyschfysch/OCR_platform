"""
üîç OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞
"""
import streamlit as st
import json
import sys
import os
from datetime import datetime
from typing import Dict, Any, List, Optional
from PIL import Image

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º core
sys.path.append(os.path.join(os.path.dirname(__file__), 'core'))

try:
    from core.config import get_available_configs, get_config, get_field_description
    from core.ocr_engine import OCREngine, DocumentProcessor
    from core.display import ImageDisplay, ThumbnailCreator, StyleManager, InteractiveMarkup
    from core.processors import SimpleImageProcessor, ResultsManager
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    st.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ core/")
    st.stop()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üîç OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞", 
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

TESSERACT_PATH = None # r'C:\Program Files\Tesseract-OCR\tesseract.exe'

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –≤ –Ω–∞—á–∞–ª–µ
    StyleManager.add_styles()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    init_session_state()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    render_sidebar()
    
    if st.session_state.images:
        render_main_interface()
    else:
        st.info("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'uploaded_file' not in st.session_state:
        st.session_state.uploaded_file = None
    if 'images' not in st.session_state:
        st.session_state.images = []
    if 'current_page' not in st.session_state:
        st.session_state.current_page = 0
    if 'selected_config' not in st.session_state:
        st.session_state.selected_config = None
    if 'results' not in st.session_state:
        st.session_state.results = {}
    if 'manual_mode' not in st.session_state:
        st.session_state.manual_mode = False
    if 'field_coords' not in st.session_state:
        st.session_state.field_coords = {}
    if 'processing_complete' not in st.session_state:
        st.session_state.processing_complete = False
    if 'rotation_angle' not in st.session_state:
        st.session_state.rotation_angle = 0
    if 'json_editor_content' not in st.session_state:
        st.session_state.json_editor_content = ""
    if 'page_approved' not in st.session_state:
        st.session_state.page_approved = {}
    if 'show_all_pages' not in st.session_state:
        st.session_state.show_all_pages = False

def render_sidebar():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
    with st.sidebar:
        st.header("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        uploaded = st.file_uploader("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å PDF –¥–æ–∫—É–º–µ–Ω—Ç:", type=['pdf'])
        
        if uploaded and uploaded != st.session_state.uploaded_file:
            st.session_state.uploaded_file = uploaded
            load_pdf(uploaded)
        
        if st.session_state.uploaded_file:
            st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {st.session_state.uploaded_file.name}")
            st.info(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {len(st.session_state.images)}")
        
        st.markdown("---")
        
        # 2. –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        st.subheader("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        try:
            configs = get_available_configs()
            options = ["üîß –†—É—á–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞"] + [get_config(key).name for key in configs]
            
            selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", options)
            
            if selected == "üîß –†—É—á–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞":
                st.session_state.manual_mode = True
                st.session_state.selected_config = None
            elif selected != st.session_state.get('selected_config_name'):
                # –ù–∞–π–¥–µ–º –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏
                config_key = None
                for key in configs:
                    if get_config(key).name == selected:
                        config_key = key
                        break
                
                st.session_state.manual_mode = False
                st.session_state.selected_config = config_key
                st.session_state.selected_config_name = selected
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            st.session_state.manual_mode = True
            st.session_state.selected_config = None
        
        st.markdown("---")
        
        # 3. –ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if st.session_state.images:
            st.subheader("üîÑ –ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚Üª –ü–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ 90¬∞"):
                    rotate_image(90)
            with col2:
                if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–≤–æ—Ä–æ—Ç"):
                    reset_rotation()
            
            if st.session_state.rotation_angle != 0:
                st.caption(f"–£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞: {st.session_state.rotation_angle}¬∞")
        
        st.markdown("---")
        
        # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if st.session_state.images and (st.session_state.selected_config or st.session_state.manual_mode):
            st.subheader("üîç OCR –û–±—Ä–∞–±–æ—Ç–∫–∞")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üîç –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É", type="primary"):
                    process_current_page()
            with col2:
                if st.button("üìã –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", type="primary"):
                    process_all_pages()
        
        # 5. –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if st.session_state.processing_complete and st.session_state.results:
            st.markdown("---")
            st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            if st.button("üì• –°–∫–∞—á–∞—Ç—å JSON", type="primary"):
                export_clean_results()

def load_pdf(uploaded_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ PDF —Ñ–∞–π–ª–∞"""
    try:
        with st.spinner("üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞..."):
            pdf_bytes = uploaded_file.read()
            processor = SimpleImageProcessor(max_dimension=1200)
            images = processor.convert_pdf_to_images(pdf_bytes)
            
            if images:
                st.session_state.images = images
                st.session_state.current_page = 0
                st.session_state.results = {}
                st.session_state.processing_complete = False
                st.session_state.rotation_angle = 0
                st.session_state.page_approved = {}
                st.session_state.show_all_pages = False
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(images)} —Å—Ç—Ä–∞–Ω–∏—Ü")
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ PDF")
                
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF: {e}")

def rotate_image(angle: int):
    """–ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π —É–≥–æ–ª"""
    st.session_state.rotation_angle = (st.session_state.rotation_angle + angle) % 360
    st.rerun()

def reset_rotation():
    """–°–±—Ä–æ—Å –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if st.session_state.rotation_angle != 0:
        st.session_state.rotation_angle = 0
        st.rerun()

def render_main_interface():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    current_image = st.session_state.images[st.session_state.current_page]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_image = current_image
    if st.session_state.rotation_angle != 0:
        processor = SimpleImageProcessor()
        display_image = processor.rotate_image(current_image, st.session_state.rotation_angle)
    
    # –°–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
    if len(st.session_state.images) > 1 and not st.session_state.show_all_pages:
        page = st.selectbox(
            "üìÑ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
            range(len(st.session_state.images)),
            format_func=lambda x: f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {x + 1}",
            index=st.session_state.current_page
        )
        
        if page != st.session_state.current_page:
            st.session_state.current_page = page
            st.rerun()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    field_boxes = get_field_boxes()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–ª—è–º–∏
    if not st.session_state.show_all_pages:
        try:
            display = ImageDisplay()
            fig = display.create_figure(display_image, field_boxes)
            st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': False})
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            st.image(display_image)
        
        st.caption(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {display_image.width}√ó{display_image.height} –ø–∏–∫—Å–µ–ª–µ–π")
    
    # –í–∫–ª–∞–¥–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    if st.session_state.results and st.session_state.manual_mode:
        tab1, tab2, tab3 = st.tabs(["üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìù JSON –†–µ–¥–∞–∫—Ç–æ—Ä", "üéØ –†–∞–∑–º–µ—Ç–∫–∞ –ø–æ–ª–µ–π"])
        with tab1:
            render_results()
        with tab2:
            render_json_editor()
        with tab3:
            render_manual_markup(current_image)
    elif st.session_state.results:
        tab1, tab2 = st.tabs(["üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üìù JSON –†–µ–¥–∞–∫—Ç–æ—Ä"])
        with tab1:
            render_results()
        with tab2:
            render_json_editor()
    elif st.session_state.manual_mode:
        render_manual_markup(current_image)

def get_field_boxes() -> Dict[str, List[int]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è - –û–ë–ù–û–í–õ–ï–ù–û –¥–ª—è series_and_number"""
    if st.session_state.manual_mode:
        return st.session_state.field_coords
    elif st.session_state.selected_config:
        config = get_config(st.session_state.selected_config)
        if config:
            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: series_and_number –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ–¥–∏–Ω–æ–µ –ø–æ–ª–µ
            display_fields = config.fields.copy()
            return display_fields
    return {}

def render_manual_markup(image: Image.Image):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä—É—á–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏ - –û–ë–ù–û–í–õ–ï–ù–û"""
    st.markdown("### üéØ –†—É—á–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ –ø–æ–ª–µ–π")
    
    markup = InteractiveMarkup()
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è —Ä—É—á–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏
    markup.field_names = ["full_name", "series_and_number", "registration_number", "issue_date"]
    field_name = markup.render_field_selector()
    
    # –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—è
    current_coords = st.session_state.field_coords.get(field_name, [100, 100, 300, 200])
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        x1 = st.number_input("X1", value=current_coords[0], key=f"x1_{field_name}")
    with col2:
        y1 = st.number_input("Y1", value=current_coords[1], key=f"y1_{field_name}")
    with col3:
        x2 = st.number_input("X2", value=current_coords[2], key=f"x2_{field_name}")
    with col4:
        y2 = st.number_input("Y2", value=current_coords[3], key=f"y2_{field_name}")
    
    new_coords = [int(x1), int(y1), int(x2), int(y2)]
    st.session_state.field_coords[field_name] = new_coords
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—è
    if st.button(f"üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—è {field_name}"):
        creator = ThumbnailCreator()
        thumbnail = creator.create_thumbnail(image, new_coords, height=40)
        if thumbnail:
            st.markdown(f'<img src="{thumbnail}" class="thumbnail-image">', unsafe_allow_html=True)

def process_current_page():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        with st.spinner("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è..."):
            if st.session_state.manual_mode:
                if not st.session_state.field_coords:
                    st.error("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–µ–π –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ")
                    return
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                from core.config import DocumentConfig
                temp_config = DocumentConfig(
                    name="–†—É—á–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞",
                    organization="MANUAL",
                    document_type="manual",
                    fields=st.session_state.field_coords,
                    ocr_params={'scale_factor': 3, 'contrast_boost': 1.5}
                )
                config = temp_config
            else:
                config = get_config(st.session_state.selected_config)
                if not config:
                    st.error("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
            
            processor = DocumentProcessor(TESSERACT_PATH)
            image = st.session_state.images[st.session_state.current_page]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if st.session_state.rotation_angle != 0:
                img_processor = SimpleImageProcessor()
                image = img_processor.rotate_image(image, st.session_state.rotation_angle)
            
            results = processor.process_single_image(image, config)
            
            if not st.session_state.results:
                st.session_state.results = {}
                
            st.session_state.results[st.session_state.current_page] = results
            st.session_state.processing_complete = True
            
            update_json_editor()
            st.success("‚úÖ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            st.rerun()
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ OCR –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

def process_all_pages():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
    try:
        if st.session_state.manual_mode:
            if not st.session_state.field_coords:
                st.error("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–µ–π –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ")
                return
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            from core.config import DocumentConfig
            temp_config = DocumentConfig(
                name="–†—É—á–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞",
                organization="MANUAL", 
                document_type="manual",
                fields=st.session_state.field_coords,
                ocr_params={'scale_factor': 3, 'contrast_boost': 1.5}
            )
            config = temp_config
        else:
            config = get_config(st.session_state.selected_config)
            if not config:
                st.error("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
        
        processor = DocumentProcessor(TESSERACT_PATH)
        img_processor = SimpleImageProcessor()
        
        results = {}
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        for i, image in enumerate(st.session_state.images):
            progress = (i + 1) / len(st.session_state.images)
            progress_bar.progress(progress)
            status_text.text(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {i + 1} –∏–∑ {len(st.session_state.images)}...")
            
            processing_image = image
            if st.session_state.rotation_angle != 0:
                processing_image = img_processor.rotate_image(image, st.session_state.rotation_angle)
            
            result = processor.process_single_image(processing_image, config)
            results[i] = result
        
        st.session_state.results = results
        st.session_state.processing_complete = True
        st.session_state.show_all_pages = True
        
        update_json_editor()
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        progress_bar.empty()
        status_text.empty()
        
        st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Å—Ç—Ä–∞–Ω–∏—Ü!")
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

def get_confidence_icon(field_name: str, page_results: Dict[str, Any]) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—è - –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
    if field_name not in page_results:
        return "‚ùå"  # –ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
    
    value = page_results[field_name]
    if not str(value).strip():
        return "‚ùå"  # –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏
    uncertain_key = f"uncertain_{field_name}"
    if uncertain_key in page_results and page_results[uncertain_key]:
        return "‚ö†Ô∏è"  # –ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    
    return "‚úÖ"  # –£–≤–µ—Ä–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ

def render_results():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR"""
    st.markdown("### üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
    
    if not st.session_state.results:
        st.warning("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        return
    
    if st.session_state.show_all_pages:
        render_all_pages_results()
    else:
        render_single_page_results()

def render_all_pages_results():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
    # –ö–Ω–æ–ø–∫–∞ "–û–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ"
    all_approved = all(st.session_state.page_approved.get(i, False) for i in st.session_state.results.keys())
    
    col1, col2 = st.columns([1, 3])
    with col1:
        if st.button("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", disabled=all_approved):
            for page_num in st.session_state.results.keys():
                st.session_state.page_approved[page_num] = True
            st.success("–í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–¥–æ–±—Ä–µ–Ω—ã!")
            st.rerun()
    
    with col2:
        approved_count = sum(1 for approved in st.session_state.page_approved.values() if approved)
        total_pages = len(st.session_state.results)
        st.info(f"–û–¥–æ–±—Ä–µ–Ω–æ: {approved_count}/{total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
    
    st.markdown("---")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    for page_num in sorted(st.session_state.results.keys()):
        page_results = st.session_state.results[page_num]
        approved = st.session_state.page_approved.get(page_num, False)
        
        st.markdown(f"#### üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}")
        render_page_results_table(page_num, page_results)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        col1, col2 = st.columns([1, 3])
        with col1:
            if st.button(f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num + 1}", 
                        key=f"approve_{page_num}", disabled=approved):
                st.session_state.page_approved[page_num] = True
                st.rerun()
        with col2:
            if approved:
                st.success("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
        
        st.markdown("---")

def render_single_page_results():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    page_results = st.session_state.results.get(st.session_state.current_page, {})
    
    if not page_results:
        st.warning("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return
    
    render_page_results_table(st.session_state.current_page, page_results)

def render_page_results_table(page_num: int, page_results: Dict[str, Any]):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –û–ë–ù–û–í–õ–ï–ù–û —Å 4 —Å—Ç–æ–ª–±—Ü–∞–º–∏"""
    # –ü–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è - –û–ë–ù–û–í–õ–ï–ù
    display_fields = ['full_name', 'series', 'number', 'registration_number', 'issue_date']
    
    for field_name in display_fields:
        if field_name in page_results:
            value = page_results[field_name]
            description = get_field_description(field_name if field_name != 'series' and field_name != 'number' else 'series_and_number')
            
            # –î–ª—è —Å–µ—Ä–∏–∏ –∏ –Ω–æ–º–µ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
            if field_name == 'series':
                description = "–°–µ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            elif field_name == 'number':
                description = "–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            
            st.markdown(f'<div class="result-row">', unsafe_allow_html=True)
            
            # –ù–û–í–´–ô –ú–ê–ö–ï–¢: 4 —Å—Ç–æ–ª–±—Ü–∞
            col1, col2, col3, col4 = st.columns([0.15, 0.45, 0.3, 0.1])
            
            with col1:
                # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
                st.markdown(f'<div class="field-title" style="word-wrap: break-word; hyphens: auto;">{description}</div>', 
                          unsafe_allow_html=True)
            
            with col2:
                # –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –ø–æ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º series_and_number –¥–ª—è –æ–±–µ–∏—Ö –ø–æ–ª–µ–π
                field_boxes = get_field_boxes()
                thumbnail_field = 'series_and_number' if field_name in ['series', 'number'] else field_name
                
                if thumbnail_field in field_boxes:
                    image = st.session_state.images[page_num]
                    display_image = image
                    if st.session_state.rotation_angle != 0:
                        processor = SimpleImageProcessor()
                        display_image = processor.rotate_image(image, st.session_state.rotation_angle)
                    
                    creator = ThumbnailCreator()
                    thumbnail = creator.create_thumbnail(display_image, field_boxes[thumbnail_field], height=40)
                    if thumbnail:
                        st.markdown(
                            f'<div class="thumbnail-container">'
                            f'<img src="{thumbnail}" class="thumbnail-image">'
                            f'</div>', 
                            unsafe_allow_html=True
                        )
            
            with col3:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                new_val = st.text_area(
                    "–ó–Ω–∞—á–µ–Ω–∏–µ:",
                    value=str(value), 
                    height=60,
                    key=f"result_{field_name}_{page_num}",
                    label_visibility="collapsed"
                )
                
                if new_val != str(value):
                    st.session_state.results[page_num][field_name] = new_val
                    update_json_editor()
            
            with col4:
                # –ù–û–í–´–ô –°–¢–û–õ–ë–ï–¶: –ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                confidence_icon = get_confidence_icon(field_name, page_results)
                st.markdown(
                    f'<div style="text-align: center; font-size: 24px; padding-top: 15px;">{confidence_icon}</div>', 
                    unsafe_allow_html=True
                )
            
            st.markdown('</div>', unsafe_allow_html=True)

def render_json_editor():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ JSON —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
    st.markdown("### üìù JSON –†–µ–¥–∞–∫—Ç–æ—Ä")
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å JSON"):
            update_json_editor()
            st.success("JSON –æ–±–Ω–æ–≤–ª–µ–Ω!")
    with col2:
        if st.button("üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
            apply_json_changes()
    with col3:
        if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å JSON"):
            st.code(st.session_state.json_editor_content)
    with col4:
        st.caption("JSON —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º JSON –µ—Å–ª–∏ –ø—É—Å—Ç
    if not st.session_state.json_editor_content:
        update_json_editor()
    
    new_json = st.text_area(
        "JSON –¥–∞–Ω–Ω—ã–µ:", 
        value=st.session_state.json_editor_content,
        height=400,
        key="json_editor"
    )
    
    if new_json != st.session_state.json_editor_content:
        st.session_state.json_editor_content = new_json
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è JSON
    try:
        if st.session_state.json_editor_content:
            parsed = json.loads(st.session_state.json_editor_content)
            st.success(f"‚úÖ JSON –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(parsed)} –∑–∞–ø–∏—Å–µ–π")
    except json.JSONDecodeError as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")

def update_json_editor():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ JSON —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
    if st.session_state.results:
        clean_export = get_clean_results()
        st.session_state.json_editor_content = json.dumps(clean_export, ensure_ascii=False, indent=2)

def apply_json_changes():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ JSON —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
    try:
        new_data = json.loads(st.session_state.json_editor_content)
        new_results = {}
        
        for page_key, page_data in new_data.items():
            if page_key.startswith('page_'):
                page_num = int(page_key.split('_')[1]) - 1
                new_results[page_num] = page_data
        
        st.session_state.results = new_results
        st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è JSON –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
        st.rerun()
        
    except json.JSONDecodeError:
        st.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")

def get_clean_results() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ - –û–ë–ù–û–í–õ–ï–ù–û"""
    clean_export = {}
    
    for page_idx, page_data in st.session_state.results.items():
        page_key = f"page_{page_idx + 1}"
        clean_page_data = {}
        
        # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (–∏—Å–∫–ª—é—á–∞–µ–º uncertain_ –ø–æ–ª—è)
        for field_name in ['full_name', 'series', 'number', 'registration_number', 'issue_date']:
            if field_name in page_data:
                clean_page_data[field_name] = page_data[field_name]
        
        clean_export[page_key] = clean_page_data
    
    return clean_export

def export_clean_results():
    """–≠–∫—Å–ø–æ—Ä—Ç –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON"""
    if not st.session_state.results:
        st.warning("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    try:
        clean_export = get_clean_results()
        json_str = json.dumps(clean_export, ensure_ascii=False, indent=2)
        filename = f"ocr_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            data=json_str,
            file_name=filename,
            mime="application/json",
            type="primary"
        )
        
        st.success("‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

if __name__ == "__main__":
    main()
